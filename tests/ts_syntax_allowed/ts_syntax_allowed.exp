Error ----------------------------------------------------------------------------------------------- basic_types.js:1:1

Cannot cast `null` to undefined because null [1] is incompatible with undefined [2]. [incompatible-cast]

   basic_types.js:1:1
   1| null as undefined; // error
      ^^^^ [1]

References:
   basic_types.js:1:9
   1| null as undefined; // error
              ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- basic_types.js:6:7

Cannot cast `''` to empty because mixed [1] is incompatible with empty [2]. [incompatible-cast]

   basic_types.js:6:7
   6| '' as unknown as never; // error
            ^^^^^^^ [1]

References:
   basic_types.js:6:18
   6| '' as unknown as never; // error
                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ exported.js:10:11

Cannot use `T` [1] in an input position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   exported.js:10:11
   10|     -bad: T; // error
                 ^

References:
   exported.js:8:28
    8| export class Covariant<out T> {
                                  ^ [1]


Error ------------------------------------------------------------------------------------------------ exported.js:14:11

Cannot use `T` [1] in an output position because `T` [1] is expected to occur only in input positions.
[incompatible-variance]

   exported.js:14:11
   14|     +bad: T; // error
                 ^

References:
   exported.js:12:31
   12| export class Contravariant<in T> {
                                     ^ [1]


Error ------------------------------------------------------------------------------------ invalid_prop_variance.js:1:17

Unexpected identifier, expected the token `:`

   1| type Foo = {out foo: string} // parse error
                      ^^^


Error ---------------------------------------------------------------------------------- invalid_tparam_variance.js:1:11

Unexpected reserved type

   1| class Foo<readonly T> {} // parse error
                ^^^^^^^^


Error ---------------------------------------------------------------------------------------------------- keyof.js:10:1

Cannot cast `'foo'` to `K` because property `foo` is missing in `B` [1]. [prop-missing]

   keyof.js:10:1
   10| 'foo' as K; // error: $Keys does not include props from super class, which is different from TS
       ^^^^^

References:
   keyof.js:10:10
   10| 'foo' as K; // error: $Keys does not include props from super class, which is different from TS
                ^ [1]


Error ---------------------------------------------------------------------------------------------------- keyof.js:14:1

Cannot cast `'foo'` to `K2` because property `foo` is missing in `B` [1]. [prop-missing]

   keyof.js:14:1
   14| 'foo' as K2; // error: $Keys does not include props from super class, which is different from TS
       ^^^^^

References:
   keyof.js:14:10
   14| 'foo' as K2; // error: $Keys does not include props from super class, which is different from TS
                ^^ [1]


Error ------------------------------------------------------------------------------------------------- polarity.js:3:11

Cannot use `T` [1] in an input position because `T` [1] is expected to occur only in output positions.
[incompatible-variance]

   polarity.js:3:11
   3|     -bad: T; // error
                ^

References:
   polarity.js:1:21
   1| class Covariant<out T> {
                          ^ [1]


Error ------------------------------------------------------------------------------------------------- polarity.js:7:11

Cannot use `T` [1] in an output position because `T` [1] is expected to occur only in input positions.
[incompatible-variance]

   polarity.js:7:11
   7|     +bad: T; // error
                ^

References:
   polarity.js:5:24
   5| class Contravariant<in T> {
                             ^ [1]


Error ------------------------------------------------------------------------------------------------- polarity.js:15:1

Cannot cast `covariant` to `Covariant` because string literal `foo` [1] is incompatible with string literal `bar` [2] in
type argument `T` [3]. [incompatible-cast]

   polarity.js:15:1
   15| covariant as Covariant<'bar'>; // error
       ^^^^^^^^^

References:
   polarity.js:13:33
   13| const covariant = new Covariant<'foo'>;
                                       ^^^^^ [1]
   polarity.js:15:24
   15| covariant as Covariant<'bar'>; // error
                              ^^^^^ [2]
   polarity.js:1:21
    1| class Covariant<out T> {
                           ^ [3]


Error ------------------------------------------------------------------------------------------------ polarity.js:17:11

Cannot assign `'foo'` to `covariant.prop` because property `prop` is not writable. [cannot-write]

   17| covariant.prop = 'foo'; // error
                 ^^^^


Error ------------------------------------------------------------------------------------------------- polarity.js:21:1

Cannot cast `contravariant` to `Contravariant` because string [1] is incompatible with mixed [2] in type argument
`T` [3]. [incompatible-cast]

   polarity.js:21:1
   21| contravariant as Contravariant<mixed>; // error
       ^^^^^^^^^^^^^

References:
   polarity.js:19:41
   19| const contravariant = new Contravariant<string>;
                                               ^^^^^^ [1]
   polarity.js:21:32
   21| contravariant as Contravariant<mixed>; // error
                                      ^^^^^ [2]
   polarity.js:5:24
    5| class Contravariant<in T> {
                              ^ [3]


Error ------------------------------------------------------------------------------------------------- polarity.js:25:1

Cannot cast `invariant` to `Invariant` because string [1] is incompatible with string literal `foo` [2] in type argument
`T` [3]. [incompatible-cast]

   polarity.js:25:1
   25| invariant as Invariant<string>; // error
       ^^^^^^^^^

References:
   polarity.js:25:24
   25| invariant as Invariant<string>; // error
                              ^^^^^^ [1]
   polarity.js:24:33
   24| const invariant = new Invariant<'foo'>;
                                       ^^^^^ [2]
   polarity.js:9:24
    9| class Invariant<in out T> {
                              ^ [3]


Error ------------------------------------------------------------------------------------------------- polarity.js:30:8

Cannot assign `42` to `ro_obj.a` because property `a` is not writable. [cannot-write]

   30| ro_obj.a = 42; // error
              ^


Error ------------------------------------------------------------------------------------------------- polarity.js:31:8

Cannot assign `'hello'` to `ro_obj.b` because property `b` is not writable. [cannot-write]

   31| ro_obj.b = 'hello'; // error
              ^


Error ------------------------------------------------------------------------------------------------- polarity.js:36:1

Cannot cast `imported_covariant` to `exported.Covariant` because string literal `foo` [1] is incompatible with string
literal `bar` [2] in type argument `T` [3]. [incompatible-cast]

   polarity.js:36:1
   36| imported_covariant as exported.Covariant<'bar'>; // error
       ^^^^^^^^^^^^^^^^^^

References:
   polarity.js:34:51
   34| const imported_covariant = new exported.Covariant<'foo'>;
                                                         ^^^^^ [1]
   polarity.js:36:42
   36| imported_covariant as exported.Covariant<'bar'>; // error
                                                ^^^^^ [2]
   exported.js:8:28
    8| export class Covariant<out T> {
                                  ^ [3]


Error ------------------------------------------------------------------------------------------------ polarity.js:38:20

Cannot assign `'foo'` to `imported_covariant.prop` because property `prop` is not writable. [cannot-write]

   38| imported_covariant.prop = 'foo'; // error
                          ^^^^


Error ------------------------------------------------------------------------------------------------- polarity.js:42:1

Cannot cast `imported_contravariant` to `exported.Contravariant` because string [1] is incompatible with mixed [2] in
type argument `T` [3]. [incompatible-cast]

   polarity.js:42:1
   42| imported_contravariant as exported.Contravariant<mixed>; // error
       ^^^^^^^^^^^^^^^^^^^^^^

References:
   polarity.js:40:59
   40| const imported_contravariant = new exported.Contravariant<string>;
                                                                 ^^^^^^ [1]
   polarity.js:42:50
   42| imported_contravariant as exported.Contravariant<mixed>; // error
                                                        ^^^^^ [2]
   exported.js:12:31
   12| export class Contravariant<in T> {
                                     ^ [3]


Error ------------------------------------------------------------------------------------------------- polarity.js:46:1

Cannot cast `imported_invariant` to `exported.Invariant` because string [1] is incompatible with string literal
`foo` [2] in type argument `T` [3]. [incompatible-cast]

   polarity.js:46:1
   46| imported_invariant as exported.Invariant<string>; // error
       ^^^^^^^^^^^^^^^^^^

References:
   polarity.js:46:42
   46| imported_invariant as exported.Invariant<string>; // error
                                                ^^^^^^ [1]
   polarity.js:45:51
   45| const imported_invariant = new exported.Invariant<'foo'>;
                                                         ^^^^^ [2]
   exported.js:16:31
   16| export class Invariant<in out T> {
                                     ^ [3]


Error ------------------------------------------------------------------------------------------------- polarity.js:50:9

Cannot assign `42` to `ro_obj2.a` because property `a` is not writable. [cannot-write]

   50| ro_obj2.a = 42; // error
               ^


Error ------------------------------------------------------------------------------------------------- polarity.js:51:9

Cannot assign `'hello'` to `ro_obj2.b` because property `b` is not writable. [cannot-write]

   51| ro_obj2.b = 'hello'; // error
               ^


Error ------------------------------------------------------------------------------------ readonly_of_arr_tuple.js:3:20

TypeScript's `readonly` type operator is not valid in Flow. For array types, you can use `$ReadOnlyArray<T>`. For object
and tuple types you can use `$ReadOnly<T>`. [ts-syntax]

   3| declare const baz: readonly {foo: string}; // error
                         ^^^^^^^^^^^^^^^^^^^^^^


Error ------------------------------------------------------------------------------------- readonly_of_arr_tuple.js:4:1

Cannot cast `foo[0]` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   readonly_of_arr_tuple.js:4:1
   4| foo[0] as number; // error: string ~> number
      ^^^^^^

References:
   readonly_of_arr_tuple.js:1:30
   1| declare const foo: readonly [string, number];
                                   ^^^^^^ [1]
   readonly_of_arr_tuple.js:4:11
   4| foo[0] as number; // error: string ~> number
                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------- readonly_of_arr_tuple.js:5:1

Cannot assign empty string to `foo[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   5| foo[0] = ''; // error
      ^^^^^^ [1]


Error ------------------------------------------------------------------------------------- readonly_of_arr_tuple.js:6:1

Cannot cast `bar[0]` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   readonly_of_arr_tuple.js:6:1
   6| bar[0] as number; // error: string ~> number
      ^^^^^^

References:
   readonly_of_arr_tuple.js:2:29
   2| declare const bar: readonly string[];
                                  ^^^^^^ [1]
   readonly_of_arr_tuple.js:6:11
   6| bar[0] as number; // error: string ~> number
                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------- readonly_of_arr_tuple.js:7:1

Cannot assign empty string to `bar[0]` because read-only arrays cannot be written to. [cannot-write]

   7| bar[0] = ''; // error
      ^^^^^^


Error ------------------------------------------------------------------------------------ readonly_of_arr_tuple.js:11:1

Cannot cast `readonly_tuple[0]` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   readonly_of_arr_tuple.js:11:1
   11| readonly_tuple[0] as number; // error: string ~> number
       ^^^^^^^^^^^^^^^^^

References:
   exported.js:31:48
   31| declare export const readonly_tuple: readonly [string, number];
                                                      ^^^^^^ [1]
   readonly_of_arr_tuple.js:11:22
   11| readonly_tuple[0] as number; // error: string ~> number
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ readonly_of_arr_tuple.js:12:1

Cannot assign empty string to `readonly_tuple[0]` because tuple element at index `0` [1] is not writable. [cannot-write]

   12| readonly_tuple[0] = ''; // error
       ^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------ readonly_of_arr_tuple.js:13:1

Cannot cast `readonly_array[0]` to number because string [1] is incompatible with number [2]. [incompatible-cast]

   readonly_of_arr_tuple.js:13:1
   13| readonly_array[0] as number; // error: string ~> number
       ^^^^^^^^^^^^^^^^^

References:
   exported.js:32:47
   32| declare export const readonly_array: readonly string[];
                                                     ^^^^^^ [1]
   readonly_of_arr_tuple.js:13:22
   13| readonly_array[0] as number; // error: string ~> number
                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------ readonly_of_arr_tuple.js:14:1

Cannot assign empty string to `readonly_array[0]` because read-only arrays cannot be written to. [cannot-write]

   14| readonly_array[0] = ''; // error
       ^^^^^^^^^^^^^^^^^


Error ---------------------------------------------------------------------------------------------- tparam_bound.js:2:3

Cannot call `f` because number [1] is incompatible with string [2] in type argument `T`. [incompatible-call]

   tparam_bound.js:2:3
   2| f(1); // error: number ~> string
        ^ [1]

References:
   tparam_bound.js:1:22
   1| function f<T extends string>(t: T): void {} // ok
                           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------- tparam_bound.js:3:25

Cannot call `require(...).f` because number [1] is incompatible with string [2] in type argument `T`.
[incompatible-call]

   tparam_bound.js:3:25
   3| require('./exported').f(1); // error: number ~> string
                              ^ [1]

References:
   exported.js:6:29
   6| export function f<T extends string>(t: T): void {} // ok
                                  ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ type_names.js:3:5

Cannot call `a.push` because property `push` is missing in `$ReadOnlyArray` [1]. [prop-missing]

   type_names.js:3:5
   3|   a.push(4); // error: readonly
          ^^^^

References:
   type_names.js:2:12
   2|   const a: ReadonlyArray<number> = [3]; // ok
                 ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ type_names.js:5:5

Cannot call `b.add` because property `add` is missing in `$ReadOnlySet` [1]. [prop-missing]

   type_names.js:5:5
   5|   b.add(3); // error: readonly
          ^^^

References:
   type_names.js:4:12
   4|   const b: ReadonlySet<number> = new Set([3]); // ok
                 ^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ type_names.js:7:5

Cannot call `c.add` because property `add` is missing in `$ReadOnlyMap` [1]. [prop-missing]

   type_names.js:7:5
   7|   c.add(3, ''); // error: readonly
          ^^^

References:
   type_names.js:6:12
   6|   const c: ReadonlyMap<number, string> = new Map([[3, '']]); // ok
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------ type_names.js:9:7

Cannot assign `null` to `d` because null [1] is incompatible with string [2]. [incompatible-type]

   type_names.js:9:7
   9|   d = null; // error: nonnull
            ^^^^ [1]

References:
   type_names.js:8:22
   8|   let d: NonNullable<string | null> = ''; // ok
                           ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- type_names.js:11:5

Cannot assign empty string to `e.foo` because property `foo` is not writable. [cannot-write]

   11|   e.foo = ''; // error: readonly
           ^^^


Error ---------------------------------------------------------------------------------------------- type_names.js:16:32

Cannot call `exported_with_ts_typenames.a.push` because property `push` is missing in `$ReadOnlyArray` [1].
[prop-missing]

   type_names.js:16:32
   16|   exported_with_ts_typenames.a.push(4); // error: readonly
                                      ^^^^

References:
   exported.js:1:17
    1| export const a: ReadonlyArray<number> = [3]; // ok
                       ^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- type_names.js:17:32

Cannot call `exported_with_ts_typenames.b.add` because property `add` is missing in `$ReadOnlySet` [1]. [prop-missing]

   type_names.js:17:32
   17|   exported_with_ts_typenames.b.add(3); // error: readonly
                                      ^^^

References:
   exported.js:2:17
    2| export const b: ReadonlySet<number> = new Set([3]); // ok
                       ^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- type_names.js:18:32

Cannot call `exported_with_ts_typenames.c.add` because property `add` is missing in `$ReadOnlyMap` [1]. [prop-missing]

   type_names.js:18:32
   18|   exported_with_ts_typenames.c.add(3, ''); // error: readonly
                                      ^^^

References:
   exported.js:3:17
    3| export const c: ReadonlyMap<number, string> = new Map([[3, '']]); // ok
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]


Error ---------------------------------------------------------------------------------------------- type_names.js:19:30

Cannot assign `null` to `exported_with_ts_typenames.d` because property `d` is not writable. [cannot-write]

   19|   exported_with_ts_typenames.d = null; // error: nonnull
                                    ^


Error ---------------------------------------------------------------------------------------------- type_names.js:20:32

Cannot assign empty string to `exported_with_ts_typenames.e.foo` because property `foo` is not writable. [cannot-write]

   20|   exported_with_ts_typenames.e.foo = ''; // error: readonly
                                      ^^^



Found 43 errors
