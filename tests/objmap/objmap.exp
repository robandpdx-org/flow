Error ---------------------------------------------------------------------------------------------------- arity.js:6:10

Cannot call `g` because `$ObjMap` [1] expects the provided function type to take only one argument, the value type
number [2], but function type [3] takes more than one argument. See https://flow.org/en/docs/types/utilities/#toc-objmap
for documentation. [incompatible-call]

   arity.js:6:10
    6|   return g(o);
                ^

References:
   arity.js:1:29
    1| function g<T: {...}>(o: T): $ObjMap<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [2]
   arity.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: number,
   29|   b: string,
   30| ): number;
       --------^ [3]


Error --------------------------------------------------------------------------------------------------- arity.js:10:10

Cannot call `g` because `$ObjMap` [1] expects the provided function type to take only one argument, the value type
number [2], but function type [3] takes more than one argument. See https://flow.org/en/docs/types/utilities/#toc-objmap
for documentation. [incompatible-call]

   arity.js:10:10
   10|   return g<Columns>(o);
                ^

References:
   arity.js:1:29
    1| function g<T: {...}>(o: T): $ObjMap<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [2]
   arity.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: number,
   29|   b: string,
   30| ): number;
       --------^ [3]


Error --------------------------------------------------------------------------------------------------- arity.js:14:10

Cannot return `g(...)` because object type [1] is incompatible with `T` [2]. [incompatible-return]

   arity.js:14:10
   14|   return g(o);
                ^^^^

References:
   arity.js:13:28
   13| function f3<T: Columns>(o: T): T {
                                  ^ [1]
   arity.js:13:32
   13| function f3<T: Columns>(o: T): T {
                                      ^ [2]


Error --------------------------------------------------------------------------------------------------- arity.js:18:10

Cannot return `g<...>(...)` because object type [1] is incompatible with `T` [2]. [incompatible-return]

   arity.js:18:10
   18|   return g<T>(o);
                ^^^^^^^

References:
   arity.js:1:29
    1| function g<T: {...}>(o: T): $ObjMap<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity.js:17:32
   17| function f4<T: Columns>(o: T): T {
                                      ^ [2]


Error --------------------------------------------------------------------------------------------------- arity.js:21:25

Cannot instantiate `$ObjMap` because `$ObjMap` [1] expects the provided function type to take only one argument, the
value type number [2], but function type [3] takes more than one argument. See
https://flow.org/en/docs/types/utilities/#toc-objmap for documentation. [invalid-obj-map]

   arity.js:21:25
   21| function h(o: Columns): $ObjMap<Columns, typeof makeEditedColumn> {
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [2]
   arity.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: number,
   29|   b: string,
   30| ): number;
       --------^ [3]


Error --------------------------------------------------------------------------------------------------- arity2.js:6:10

Cannot call `g` because `$ObjMapi` [1] expects the provided function type to take only two arguments, the key type
string [2] and the value type number [3], but function type [4] takes more than two arguments. See
https://flow.org/en/docs/types/utilities/#toc-objmapi for documentation. [incompatible-call]

   arity2.js:6:10
    6|   return g(o);
                ^

References:
   arity2.js:1:29
    1| function g<T: {...}>(o: T): $ObjMapi<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity2.js:25:18
   25| type Columns = {[string]: number};
                        ^^^^^^ [2]
   arity2.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [3]
   arity2.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: string,
   29|   b: number,
   30|   c: boolean,
   31| ): number;
       --------^ [4]


Error -------------------------------------------------------------------------------------------------- arity2.js:10:10

Cannot call `g` because `$ObjMapi` [1] expects the provided function type to take only two arguments, the key type
string [2] and the value type number [3], but function type [4] takes more than two arguments. See
https://flow.org/en/docs/types/utilities/#toc-objmapi for documentation. [incompatible-call]

   arity2.js:10:10
   10|   return g<Columns>(o);
                ^

References:
   arity2.js:1:29
    1| function g<T: {...}>(o: T): $ObjMapi<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity2.js:25:18
   25| type Columns = {[string]: number};
                        ^^^^^^ [2]
   arity2.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [3]
   arity2.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: string,
   29|   b: number,
   30|   c: boolean,
   31| ): number;
       --------^ [4]


Error -------------------------------------------------------------------------------------------------- arity2.js:14:10

Cannot return `g(...)` because object type [1] is incompatible with `T` [2]. [incompatible-return]

   arity2.js:14:10
   14|   return g(o);
                ^^^^

References:
   arity2.js:13:28
   13| function f3<T: Columns>(o: T): T {
                                  ^ [1]
   arity2.js:13:32
   13| function f3<T: Columns>(o: T): T {
                                      ^ [2]


Error -------------------------------------------------------------------------------------------------- arity2.js:18:10

Cannot return `g<...>(...)` because object type [1] is incompatible with `T` [2]. [incompatible-return]

   arity2.js:18:10
   18|   return g<T>(o);
                ^^^^^^^

References:
   arity2.js:1:29
    1| function g<T: {...}>(o: T): $ObjMapi<T, typeof makeEditedColumn> {
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity2.js:17:32
   17| function f4<T: Columns>(o: T): T {
                                      ^ [2]


Error -------------------------------------------------------------------------------------------------- arity2.js:21:25

Cannot instantiate `$ObjMapi` because `$ObjMapi` [1] expects the provided function type to take only two arguments, the
key type string [2] and the value type number [3], but function type [4] takes more than two arguments. See
https://flow.org/en/docs/types/utilities/#toc-objmapi for documentation. [invalid-obj-mapi]

   arity2.js:21:25
   21| function h(o: Columns): $ObjMapi<Columns, typeof makeEditedColumn> {
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity2.js:25:18
   25| type Columns = {[string]: number};
                        ^^^^^^ [2]
   arity2.js:25:27
   25| type Columns = {[string]: number};
                                 ^^^^^^ [3]
   arity2.js:27:34
                                        v
   27| declare function makeEditedColumn(
   28|   a: string,
   29|   b: number,
   30|   c: boolean,
   31| ): number;
       --------^ [4]


Error --------------------------------------------------------------------------------------------------- arity3.js:6:46

Cannot instantiate `$TupleMap` because `$TupleMap` [1] expects the provided function type to take only one argument, the
value type number [2], but function type [3] takes more than one argument. See
https://flow.org/en/docs/types/utilities/#toc-tuplemap for documentation. [invalid-tuple-map]

   arity3.js:6:46
   6| function g<T: $ReadOnlyArray<number>>(o: T): $TupleMap<T, typeof makeEditedColumn> {
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity3.js:6:30
   6| function g<T: $ReadOnlyArray<number>>(o: T): $TupleMap<T, typeof makeEditedColumn> {
                                   ^^^^^^ [2]
   arity3.js:1:34
                                       v
   1| declare function makeEditedColumn(
   2|   a: number,
   3|   b: string,
   4| ): number;
      --------^ [3]


Error -------------------------------------------------------------------------------------------------- arity3.js:11:10

Cannot call `g` because `$TupleMap` [1] expects the provided function type to take only one argument, the value type
number [2], but function type [3] takes more than one argument. See
https://flow.org/en/docs/types/utilities/#toc-tuplemap for documentation. [incompatible-call]

   arity3.js:11:10
   11|   return g(o);
                ^

References:
   arity3.js:6:46
    6| function g<T: $ReadOnlyArray<number>>(o: T): $TupleMap<T, typeof makeEditedColumn> {
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity3.js:22:22
   22| type Columns = Array<number>;
                            ^^^^^^ [2]
   arity3.js:1:34
                                        v
    1| declare function makeEditedColumn(
    2|   a: number,
    3|   b: string,
    4| ): number;
       --------^ [3]


Error -------------------------------------------------------------------------------------------------- arity3.js:15:10

Cannot call `g` because `$TupleMap` [1] expects the provided function type to take only one argument, the value type
number [2], but function type [3] takes more than one argument. See
https://flow.org/en/docs/types/utilities/#toc-tuplemap for documentation. [incompatible-call]

   arity3.js:15:10
   15|   return g<Columns>(o);
                ^

References:
   arity3.js:6:46
    6| function g<T: $ReadOnlyArray<number>>(o: T): $TupleMap<T, typeof makeEditedColumn> {
                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity3.js:22:22
   22| type Columns = Array<number>;
                            ^^^^^^ [2]
   arity3.js:1:34
                                        v
    1| declare function makeEditedColumn(
    2|   a: number,
    3|   b: string,
    4| ): number;
       --------^ [3]


Error -------------------------------------------------------------------------------------------------- arity3.js:18:25

Cannot instantiate `$TupleMap` because `$TupleMap` [1] expects the provided function type to take only one argument, the
value type number [2], but function type [3] takes more than one argument. See
https://flow.org/en/docs/types/utilities/#toc-tuplemap for documentation. [invalid-tuple-map]

   arity3.js:18:25
   18| function h(o: Columns): $TupleMap<Columns, typeof makeEditedColumn> {
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity3.js:22:22
   22| type Columns = Array<number>;
                            ^^^^^^ [2]
   arity3.js:1:34
                                        v
    1| declare function makeEditedColumn(
    2|   a: number,
    3|   b: string,
    4| ): number;
       --------^ [3]


Error --------------------------------------------------------------------------------------------------- arity4.js:1:30

Cannot instantiate `$Call` because `$Call` [1] passes only one argument to the provided function type, but function
type [2] expects more than one argument. See https://flow.org/en/docs/types/utilities/#toc-call for documentation.
[invalid-call-util]

   arity4.js:1:30
    1| function g<T: number>(o: T): $Call<typeof makeEditedColumn, T> {
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity4.js:19:34
                                        v
   19| declare function makeEditedColumn(
   20|   a: number,
   21|   b: string,
   22| ): number;
       --------^ [2]


Error --------------------------------------------------------------------------------------------------- arity4.js:6:10

Cannot call `g` because `$Call` [1] passes only one argument to the provided function type, but function type [2]
expects more than one argument. See https://flow.org/en/docs/types/utilities/#toc-call for documentation.
[incompatible-call]

   arity4.js:6:10
    6|   return g(o);
                ^

References:
   arity4.js:1:30
    1| function g<T: number>(o: T): $Call<typeof makeEditedColumn, T> {
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity4.js:19:34
                                        v
   19| declare function makeEditedColumn(
   20|   a: number,
   21|   b: string,
   22| ): number;
       --------^ [2]


Error -------------------------------------------------------------------------------------------------- arity4.js:10:10

Cannot call `g` because `$Call` [1] passes only one argument to the provided function type, but function type [2]
expects more than one argument. See https://flow.org/en/docs/types/utilities/#toc-call for documentation.
[incompatible-call]

   arity4.js:10:10
   10|   return g<Columns>(o);
                ^

References:
   arity4.js:1:30
    1| function g<T: number>(o: T): $Call<typeof makeEditedColumn, T> {
                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   arity4.js:19:34
                                        v
   19| declare function makeEditedColumn(
   20|   a: number,
   21|   b: string,
   22| ): number;
       --------^ [2]


Error -------------------------------------------------------------------------------------------------- arity4.js:13:25

Cannot instantiate `$Call` because `$Call` [1] passes only one argument to the provided function type, but function
type [2] expects more than one argument. See https://flow.org/en/docs/types/utilities/#toc-call for documentation.
[invalid-call-util]

   arity4.js:13:25
   13| function h(o: Columns): $Call<typeof makeEditedColumn, Columns> {
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]

References:
   arity4.js:19:34
                                        v
   19| declare function makeEditedColumn(
   20|   a: number,
   21|   b: string,
   22| ): number;
       --------^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:18:6

Cannot cast object literal to `Foo` because string [1] is incompatible with number [2] in property `a`.
[incompatible-cast]

   identity.js:18:6
   18|   a: 'asd', // Error: string ~> number
            ^^^^^ [1]

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:19:6

Cannot cast object literal to `Foo` because string [1] is incompatible with number [2] in property `b`.
[incompatible-cast]

   identity.js:19:6
   19|   b: 'asd', // Error: string ~> number
            ^^^^^ [1]

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:23:6

Cannot cast `any` to `Foo` because string [1] is incompatible with number [2] in property `a`. [incompatible-cast]

   identity.js:23:6
   23|   a: string, // Error: string ~> number
            ^^^^^^ [1]

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:24:6

Cannot cast `any` to `Foo` because string [1] is incompatible with number [2] in property `b`. [incompatible-cast]

   identity.js:24:6
   24|   b: string, // Error: string ~> number
            ^^^^^^ [1]

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:27:7

Cannot cast object literal to `Foo` because property `a` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:27:7
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
             ^^ [1]

References:
   identity.js:27:12
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
                  ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:27:7

Cannot cast object literal to `Foo` because property `b` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:27:7
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
             ^^ [1]

References:
   identity.js:27:12
   27| (({}: {}): Foo); // Error: `a` and `b` are not defined.
                  ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:29:8

Cannot cast `any` to `Foo` because property `a` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:29:8
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
              ^^ [1]

References:
   identity.js:29:13
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:29:8

Cannot cast `any` to `Foo` because property `b` is missing in object type [1] but exists in object type [2].
[prop-missing]

   identity.js:29:8
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
              ^^ [1]

References:
   identity.js:29:13
   29| ((any: {}): Foo); // Error: `a` and `b` are not defined.
                   ^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:36:2

Cannot cast `foo` to object type because number [1] is incompatible with string [2] in property `a`. [incompatible-cast]

   identity.js:36:2
   36| (foo: {
        ^^^

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [1]
   identity.js:37:6
   37|   a: string, // Error: number ~> string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:36:2

Cannot cast `foo` to object type because number [1] is incompatible with string [2] in property `b`. [incompatible-cast]

   identity.js:36:2
   36| (foo: {
        ^^^

References:
   identity.js:6:8
    6|     b: number,
              ^^^^^^ [1]
   identity.js:38:6
   38|   b: string, // Error: number ~> string
            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:41:2

Cannot cast `foo.a` to empty because number [1] is incompatible with empty [2]. [incompatible-cast]

   identity.js:41:2
   41| (foo.a: empty); // Error: number ~> empty
        ^^^^^

References:
   identity.js:5:8
    5|     a: number,
              ^^^^^^ [1]
   identity.js:41:9
   41| (foo.a: empty); // Error: number ~> empty
               ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- identity.js:60:8

Cannot cast object literal to `$ObjMap` because in property `foo`: [incompatible-cast]
 - Either boolean [1] is incompatible with number [2].
 - Or boolean [1] is incompatible with string [3].

   identity.js:60:8
   60|   foo: true, // Error: boolean ~> number | string
              ^^^^ [1]

References:
   identity.js:63:10
   63|     foo: number | string,
                ^^^^^^ [2]
   identity.js:63:19
   63|     foo: number | string,
                         ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------- identity.js:68:2

Cannot cast object literal to `$ObjMap` because: [incompatible-cast]
 - Either boolean [1] is incompatible with number [2] in property `foo`.
 - Or boolean [1] is incompatible with string [3] in property `foo`.

   identity.js:68:2
        v
   68| ({
   69|   foo: true, // Error: boolean ~> number | string
   70| }: $ObjMap<
       ^

References:
   identity.js:69:8
   69|   foo: true, // Error: boolean ~> number | string
              ^^^^ [1]
   identity.js:71:11
   71|   ({ foo: number } | { foo: string }),
                 ^^^^^^ [2]
   identity.js:71:29
   71|   ({ foo: number } | { foo: string }),
                                   ^^^^^^ [3]


Error ------------------------------------------------------------------------------------------------ issue-2674.js:5:2

Cannot cast `a.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:5:2
   5| (a.FOO: 'BAR'); // error
       ^^^^^

References:
   issue-2674.js:1:10
   1| type A = $ObjMapi<{ FOO: null }, <K>(k: K) => K>;
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   issue-2674.js:5:9
   5| (a.FOO: 'BAR'); // error
              ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ issue-2674.js:6:9

Cannot assign `'BAR'` to `a.FOO` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:6:9
   6| a.FOO = 'BAR'; // error
              ^^^^^ [1]

References:
   issue-2674.js:1:10
   1| type A = $ObjMapi<{ FOO: null }, <K>(k: K) => K>;
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:12:2

Cannot cast `b.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:12:2
   12| (b.FOO : 'BAR'); // error
        ^^^^^

References:
   issue-2674.js:8:46
    8| type B = $ObjMap<{ FOO: null }, <K>(k: K) => 'FOO'>;
                                                    ^^^^^ [1]
   issue-2674.js:12:10
   12| (b.FOO : 'BAR'); // error
                ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:13:9

Cannot assign `'BAR'` to `b.FOO` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:13:9
   13| b.FOO = 'BAR'; // error
               ^^^^^ [1]

References:
   issue-2674.js:8:46
    8| type B = $ObjMap<{ FOO: null }, <K>(k: K) => 'FOO'>;
                                                    ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:19:2

Cannot cast `c[0]` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   issue-2674.js:19:2
   19| (c[0]: 'BAR'); // error
        ^^^^

References:
   issue-2674.js:15:49
   15| type C = $TupleMap<[mixed, mixed], <K>(k: K) => 'FOO'>;
                                                       ^^^^^ [1]
   issue-2674.js:19:8
   19| (c[0]: 'BAR'); // error
              ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- issue-2674.js:20:8

Cannot assign `'BAR'` to `c[0]` because string [1] is incompatible with string literal `FOO` [2]. [incompatible-type]

   issue-2674.js:20:8
   20| c[0] = 'BAR'; // error
              ^^^^^ [1]

References:
   issue-2674.js:15:49
   15| type C = $TupleMap<[mixed, mixed], <K>(k: K) => 'FOO'>;
                                                       ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- keyMirror.js:9:2

Cannot cast `o.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   keyMirror.js:9:2
   9| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
       ^^^^^

References:
   keyMirror.js:1:38
   1| declare function keyMirror<O>(o: O): $KeyMirror<O>;
                                           ^^^^^^^^^^^^^ [1]
   keyMirror.js:9:10
   9| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
               ^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- keyMirror.js:28:27

Cannot instantiate `$KeyMirror` because number literal `1` [1] is not a valid argument of `$KeyMirror` [2].
[incompatible-use]

   keyMirror.js:28:27
   28| declare var badKeyMirror: $KeyMirror<1>;
                                 ^^^^^^^^^^^^^ [2]

References:
   keyMirror.js:28:38
   28| declare var badKeyMirror: $KeyMirror<1>;
                                            ^ [1]


Error ------------------------------------------------------------------------------- lti_implicit_instantiation.js:9:12

Cannot cast `map(...)` to object type because string [1] is incompatible with number [2] in property `bar`.
[incompatible-cast]

   lti_implicit_instantiation.js:9:12
   9| const o1 = map(foo) as {bar: number}; // error
                 ^^^^^^^^

References:
   lti_implicit_instantiation.js:8:49
   8| const foo = Object.freeze({bar: {log: (f: () => string) => {}}})
                                                      ^^^^^^ [1]
   lti_implicit_instantiation.js:9:30
   9| const o1 = map(foo) as {bar: number}; // error
                                   ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------------ main.js:7:2

Cannot cast `t1` to string because boolean [1] is incompatible with string [2]. [incompatible-cast]

   main.js:7:2
   7| (t1: string); // error
       ^^

References:
   objmapconst.js:5:24
   5| declare export var t1: typeof t.f;
                             ^^^^^^^^^^ [1]
   main.js:7:6
   7| (t1: string); // error
           ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objmap.js:10:2

Cannot cast `o.FOO` to string literal `BAR` because string literal `FOO` [1] is incompatible with string literal
`BAR` [2]. [incompatible-cast]

   objmap.js:10:2
   10| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
        ^^^^^

References:
   objmap.js:2:38
    2| declare function keyMirror<O>(o: O): $ObjMapi<O, <K>(k:K) => K>;
                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   objmap.js:10:10
   10| (o.FOO : 'BAR'); // error, 'FOO' incompatible with 'BAR'
                ^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objmap.js:16:4

Cannot cast `o.foo` to string because number [1] is incompatible with string [2]. [incompatible-cast]

   objmap.js:16:4
   16|   (o.foo: string); // error, number ~> string
          ^^^^^

References:
   objmap.js:13:24
   13|   foo: Promise.resolve(0),
                              ^ [1]
   objmap.js:16:11
   16|   (o.foo: string); // error, number ~> string
                 ^^^^^^ [2]


Error --------------------------------------------------------------------------------------------------- objmap.js:23:5

Cannot assign object literal to `foo` because property `a` is missing in object literal [1] but exists in object
type [2]. [prop-missing]

   objmap.js:23:5
   23| > = {} // error, {| a: number |} ~> {} 
           ^^ [1]

References:
   objmap.js:20:10
                v-------
   20| var foo: $ObjMap<
   21|   {|a: number|},
   22|   <T>(t:T) => T
   23| > = {} // error, {| a: number |} ~> {} 
       ^ [2]


Error ----------------------------------------------------------------------------------------------- objmapconst.js:6:2

Cannot cast `t1` to string because boolean [1] is incompatible with string [2]. [incompatible-cast]

   objmapconst.js:6:2
   6| (t1: string); // error
       ^^

References:
   objmapconst.js:5:24
   5| declare export var t1: typeof t.f;
                             ^^^^^^^^^^ [1]
   objmapconst.js:6:6
   6| (t1: string); // error
           ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:11:2

Cannot cast `o3.b` to array type because undefined [1] is incompatible with array type [2]. [incompatible-cast]

   optional.js:11:2
   11| (o3.b: Array<number | void>); // Error: void ~> array
        ^^^^

References:
   optional.js:3:17
    3| declare var o3: $ObjMap<{a: number, b?: number}, <T>(T) => Array<T>>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   optional.js:11:8
   11| (o3.b: Array<number | void>); // Error: void ~> array
              ^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:11:2

Cannot cast `o3.b` to array type because undefined [1] is incompatible with number [2] in array element. Arrays are
invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-cast]

   optional.js:11:2
   11| (o3.b: Array<number | void>); // Error: void ~> array
        ^^^^

References:
   optional.js:11:23
   11| (o3.b: Array<number | void>); // Error: void ~> array
                             ^^^^ [1]
   optional.js:3:41
    3| declare var o3: $ObjMap<{a: number, b?: number}, <T>(T) => Array<T>>;
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:15:2

Cannot cast `o6.b` to array type because undefined [1] is incompatible with array type [2]. [incompatible-cast]

   optional.js:15:2
   15| (o6.b: Array<number | void>); // Error: void ~> array
        ^^^^

References:
   optional.js:7:17
    7| declare var o6: $ObjMapi<{a: number, b?: number}, <T>(any, T) => Array<T>>;
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ [1]
   optional.js:15:8
   15| (o6.b: Array<number | void>); // Error: void ~> array
              ^^^^^^^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:15:2

Cannot cast `o6.b` to array type because undefined [1] is incompatible with number [2] in array element. Arrays are
invariantly typed. See
https://flow.org/en/docs/faq/#why-cant-i-pass-an-arraystring-to-a-function-that-takes-an-arraystring-number.
[incompatible-cast]

   optional.js:15:2
   15| (o6.b: Array<number | void>); // Error: void ~> array
        ^^^^

References:
   optional.js:15:23
   15| (o6.b: Array<number | void>); // Error: void ~> array
                             ^^^^ [1]
   optional.js:7:42
    7| declare var o6: $ObjMapi<{a: number, b?: number}, <T>(any, T) => Array<T>>;
                                                ^^^^^^ [2]



Found 49 errors
