conditional-types.js:1:6
Flags:
type T1 = "1" extends string ? number : boolean
= number
conditional-types.js:1:6,1:7

conditional-types.js:4:6
Flags:
type T2 = 1 extends number ? string : boolean
= string
conditional-types.js:4:6,4:7

conditional-types.js:7:6
Flags:
type T3 = Array<string> extends $ReadOnlyArray<infer X> ? X : empty
= string
conditional-types.js:7:6,7:7

conditional-types.js:11:6
Flags:
type T4_1 = string extends (infer X extends infer X extends string
  ? string
  : number)
  ? string
  : number
= string
conditional-types.js:11:6,11:9

conditional-types.js:13:6
Flags:
type T4_2 = string extends (infer X extends infer Y extends string
  ? string
  : number)
  ? string
  : number
= string
conditional-types.js:13:6,13:9

conditional-types.js:17:6
Flags:
type T5 = string extends {bar: String, foo: infer String, ...} ? string : number
= number
conditional-types.js:17:6,17:7

conditional-types.js:21:6
Flags:
type T6 = string extends {bar: <T>(T) => void, foo: infer T, ...}
  ? string
  : number
= number
conditional-types.js:21:6,21:7

conditional-types.js:25:6
Flags:
type T7<T> = T extends infer T ? string : number
= string
conditional-types.js:25:6,25:7

conditional-types.js:29:6
Flags:
type T8<T> = T extends {bar: <T>(T) => void, foo: infer T, ...}
  ? string
  : number
= string | number
conditional-types.js:29:6,29:7

conditional-types.js:34:5
Flags:
number | string
conditional-types.js:34:5,34:5

exact.js:4:6
Flags:
type B = $Exact<A>
exact.js:4:6,4:6

exact.js:6:13
Flags:
$Exact<A>
exact.js:6:13,6:13

exact.js:8:13
Flags:
$Exact<B>
exact.js:8:13,8:13

exact.js:10:13
Flags:
{|p: number|}
exact.js:10:13,10:13

exact.js:13:17
Flags:
$Exact<X>
exact.js:13:17,13:17

exact.js:15:7
Flags:
$Exact<X>
exact.js:15:7,15:7

exact.js:19:13
Flags:
$Exact<A>
exact.js:19:13,19:13

exact.js:23:13
Flags:
$Exact<Class<C>>
exact.js:23:13,23:13

exact.js:26:6
Flags:
type P<X> = {|m: (x: X) => void|}
exact.js:26:6,26:6

exact.js:28:6
Flags:
type Q<X> = $Exact<P<X>>
exact.js:28:6,28:6

exact.js:34:15
Flags:
R
exact.js:34:15,34:15

react-component.js:12:6
Flags:
type ReactA = ElementProps<typeof MyComponent>
react-component.js:12:6,12:11

react-component.js:14:6
Flags:
type ReactAP<X> = ElementProps<X>
react-component.js:14:6,14:12

react-component.js:20:13
Flags:
{
  x: {m<T>(x: $NonMaybeType<T>): T, ...},
  y: {m<T>(x: $NonMaybeType<T>): T, ...},
  ...
}
= {x: {m<T>(x: T): T, ...}, y: {m<T>(x: T): T, ...}, ...}
react-component.js:20:13,20:13

spread.js:12:6
Flags:
type EObj2 = {|w: O, x: O, y: O, z: O|}
spread.js:12:6,12:10

spread.js:14:6
Flags:
type C1 = {...C, o: O, ...}
= {f: O, o: O, ...}
spread.js:14:6,14:7

spread.js:16:6
Flags:
type C2 = {o: O, ...C, ...}
= {f: O, o: O, ...}
spread.js:16:6,16:7

spread.js:18:6
Flags:
type EC1 = {|...$Exact<C>, o: O|}
= {|f: O, o: O|}
spread.js:18:6,18:8

spread.js:20:6
Flags:
type EC2 = {|o: O, ...C|}
= {|f: O, o: O|}
spread.js:20:6,20:8

spread.js:22:6
Flags:
type Ctor1 = {...Ctor, o: O, ...}
= {name: string, o: O, ...}
spread.js:22:6,22:10

spread.js:24:6
Flags:
type P1<T> = {...P<T>, o: O, ...}
= {o: O, p: T, ...}
spread.js:24:6,24:7

spread.js:26:6
Flags:
type Rec = {o: O, ...Rec, ...}
= empty
spread.js:26:6,26:8

spread.js:30:6
Flags:
type B1<T: {...}, S: {...}> = {...T, ...S, o: O, ...}
= {o: O, ...}
spread.js:30:6,30:7

spread.js:32:6
Flags:
type B2<T: {...}> = {...T, o: O, ...}
= {o: O, ...}
spread.js:32:6,32:7

spread.js:34:6
Flags:
type B3<T: {...}> = {o: O, ...T, ...}
spread.js:34:6,34:7

spread.js:36:6
Flags:
type B4<T: {...}> = {o: O, ...T, oo: O, ...}
spread.js:36:6,36:7

spread.js:38:6
Flags:
type B5<T: {...}> = {u: O, w: T, v: O, x: O, ...T, y: O, ...}
spread.js:38:6,38:7

spread.js:40:6
Flags:
type EB1<T: {...}, S: {...}> = {|...T, ...S, o: O|}
spread.js:40:6,40:8

spread.js:42:6
Flags:
type EB2<T: {...}> = {|...T, o: O|}
spread.js:42:6,42:8

spread.js:44:6
Flags:
type EB3<T: {...}> = {|o: O, ...T|}
spread.js:44:6,44:8

spread.js:46:6
Flags:
type EB4<T: {...}> = {|o: O, ...T, oo: O|}
spread.js:46:6,46:8

spread.js:48:6
Flags:
type EB5<T: {...}> = {|u: O, w: T, v: O, x: O, ...T, y: O|}
spread.js:48:6,48:8

spread.js:50:6
Flags:
type PTA1<T: {...}> = {...B2<T>, ...T, ...}
spread.js:50:6,50:9

spread.js:52:6
Flags:
type PTA2<T: {...}> = {...T, ...B2<T>, ...}
= {o: O, ...}
spread.js:52:6,52:9

spread.js:54:6
Flags:
type EP1<T> = {|...P<T>, o: O|}
spread.js:54:6,54:8

spread.js:56:6
Flags:
type EP2<T> = {|o: O, ...P<T>|}
spread.js:56:6,56:8

spread.js:58:6
Flags:
type ECtor1 = {|...Ctor, o: O|}
= {|name: string, o: O|}
spread.js:58:6,58:11

spread.js:60:6
Flags:
type ECtor2 = {|o: O, ...Ctor|}
= any (implicit)
spread.js:60:6,60:11

spread.js:62:6
Flags:
type PRec<X> = {o: O, ...PRec<X>, ...}
= empty
spread.js:62:6,62:9

spread.js:64:6
Flags:
type IP1<T: {...}> = {...B1<T>, ...} & {...B2<T>, ...}
spread.js:64:6,64:8

spread.js:66:6
Flags:
type Nest1<T: {...}> = {...T, ...}
= {...}
spread.js:66:6,66:10

spread.js:68:6
Flags:
type Nest2<T: {...}> = {...T, ...}
= {...}
spread.js:68:6,68:10

spread.js:70:6
Flags:
type UNest<T: {...}> = {...T, ...}
= {...}
spread.js:70:6,70:10

type-destructor.js:20:6
Flags:
type Country = $Keys<{|FR: string, IT: string, US: string|}>
= "US" | "IT" | "FR"
type-destructor.js:20:6,20:12

type-destructor.js:23:6
Flags:
type KeysPoly<K> = $Keys<K>
type-destructor.js:23:6,23:13

type-destructor.js:27:6
Flags:
type Prop$Values = $Values<Props>
= string | number
type-destructor.js:27:6,27:16

type-destructor.js:31:6
Flags:
type ValuesOfFrozenObject = $Values<{|A: string, B: string|}>
= "b" | "a"
type-destructor.js:31:6,31:25

type-destructor.js:34:6
Flags:
type ValuesPoly<X> = $Values<X>
type-destructor.js:34:6,34:15

type-destructor.js:37:6
Flags:
type ValuesPolyBound<X: {f: number, ...}> = $Values<X>
= number
type-destructor.js:37:6,37:20

type-destructor.js:41:6
Flags:
type ReadOnlyObj = $ReadOnly<{key: any, ...}>
= {+key: any, ...}
type-destructor.js:41:6,41:16

type-destructor.js:50:6
Flags:
type RequiredProps = $Diff<Props, DefaultProps>
= {name: string, ...}
type-destructor.js:50:6,50:18

type-destructor.js:53:6
Flags:
type DiffFromEmptyObjectError = $Diff<{...}, {nope: number, ...}>
= {...}
type-destructor.js:53:6,53:29

type-destructor.js:55:6
Flags:
type DiffFromEmptyObjectOkay = $Diff<{...}, {nope: (number | void), ...}>
= {...}
type-destructor.js:55:6,55:28

type-destructor.js:57:6
Flags:
type DiffObjPoly<X> = $Diff<{|y: X|}, {[string]: X}>
= {|y?: X|}
type-destructor.js:57:6,57:16

type-destructor.js:59:6
Flags:
type DiffObjPoly2<X, Y> = $Diff<{|x: X, y: Y|}, {|x: X|}>
= {|y: Y|}
type-destructor.js:59:6,59:17

type-destructor.js:61:6
Flags:
type DiffObjPoly3<X, Y> = $Diff<{|x: X, y: Y|}, ?{|x: X|}>
= {|x: X, y: Y|} | {|y: Y|}
type-destructor.js:61:6,61:17

type-destructor.js:63:6
Flags:
type DiffObjPoly4<X, Y> = $Diff<{|x: X, y: Y|}, {|x?: X|}>
= {|x?: X, y: Y|}
type-destructor.js:63:6,63:17

type-destructor.js:67:6
Flags:
type RestProps = $Rest<Props, {|age: number|}>
= {name?: string, ...}
type-destructor.js:67:6,67:14

type-destructor.js:70:6
Flags:
type RestObj = $Rest<{|y: O1|}, {[string]: O2}>
= {|y?: O1|}
type-destructor.js:70:6,70:12

type-destructor.js:72:6
Flags:
type RestObjPoly<X> = $Rest<{|y: X|}, {[string]: X}>
= {|y?: X|}
type-destructor.js:72:6,72:16

type-destructor.js:74:6
Flags:
type RestObjPoly2<X, Y> = $Rest<{|x: X, y: Y|}, {|x: X|}>
= {|y: Y|}
type-destructor.js:74:6,74:17

type-destructor.js:78:6
Flags:
type PropertyTypeProps = Props["name"]
= string
type-destructor.js:78:6,78:22

type-destructor.js:82:6
Flags:
type ElementTypeProps = Props["name"]
= string
type-destructor.js:82:6,82:21

type-destructor.js:84:6
Flags:
type ElementTypePropsPoly<K> = Props[K]
type-destructor.js:84:6,84:25

type-destructor.js:86:6
Flags:
type ElementTypePropsPolyBounded<K: "name" | "age"> = Props[K]
= string | number
type-destructor.js:86:6,86:32

type-destructor.js:88:6
Flags:
type ElementTypePropsPolyBoundedEmpty<K: "phone"> = Props[K]
type-destructor.js:88:6,88:37

type-destructor.js:92:6
Flags:
type NonMaybeTypeNumber = $NonMaybeType<?number>
= number
type-destructor.js:92:6,92:23

type-destructor.js:94:6
Flags:
type NonMaybeTypeAbstract<X> = $NonMaybeType<X>
= X
type-destructor.js:94:6,94:25

type-destructor.js:98:6
Flags:
type ObjMapProps = $ObjMap<Props, <T>(T) => Array<T>>
= {age: Array<number>, name: Array<string>, ...}
type-destructor.js:98:6,98:16

type-destructor.js:101:6
Flags:
type ObjMapPoly<X, Y> = $ObjMap<{a: X, b?: Y, ...}, <T>(T) => Array<T>>
= {a: Array<X>, b?: Array<Y>, ...}
type-destructor.js:101:6,101:15

type-destructor.js:105:6
Flags:
type ObjMapiProps = $ObjMapi<Props, <K, V>(K, V) => Array<(K | V)>>
= {age: Array<("age" | number)>, name: Array<("name" | string)>, ...}
type-destructor.js:105:6,105:17

type-destructor.js:107:6
Flags:
type ObjMapiPoly<X, Y> = $ObjMapi<
  {a: X, b?: Y, ...},
  <K, V>(K, V) => Array<(K | V)>,
>
= {a: Array<("a" | X)>, b?: Array<("b" | Y)>, ...}
type-destructor.js:107:6,107:16

type-destructor.js:112:6
Flags:
type ObjMapFnReturnTypes = $ObjMapi<FnObj, ExtractReturnObjectType>
= {
  getAge: {k: "getAge", v: number, ...},
  getName: {k: "getName", v: string, ...},
  ...
}
type-destructor.js:112:6,112:24

type-destructor.js:116:6
Flags:
type TupleMapMixedPair = $TupleMap<[mixed, mixed], <K>(k: K) => (K | null)>
= [mixed, mixed]
type-destructor.js:116:6,116:22

type-destructor.js:118:6
Flags:
type TupleMapMixedPairPoly<X> = $TupleMap<[X, mixed], <K>(k: K) => (K | null)>
= [(X | null), mixed]
type-destructor.js:118:6,118:26

type-destructor.js:123:6
Flags:
type TupleMapFnReturnTypes = $TupleMap<FnTuple, ExtractReturnType>
= [string, number]
type-destructor.js:123:6,123:26

type-destructor.js:129:6
Flags:
type CallExtractPropType = $Call<ExtractPropType, PropObj>
= number
type-destructor.js:129:6,129:24

type-destructor.js:142:6
Flags:
type CallNestedObjType = $Call<
  <T>({+data: ?$ReadOnlyArray<{+foo: ?{+bar: ?T, ...}, ...}>, ...}) => T,
  NestedObj,
>
= number
type-destructor.js:142:6,142:22

type-destructor.js:157:6
Flags:
type CallExtractPropTypePoly<P> = $Call<ExtractPropType, PropObjPoly<P>>
= P
type-destructor.js:157:6,157:28

type-destructor.js:161:6
Flags:
type ExportsM = {|+x: number|}
type-destructor.js:161:6,161:13

type-destructor.js:165:18
Flags:
<T: {...}, K: T>() => T[K]
type-destructor.js:165:18,165:28

type-destructor.js:167:18
Flags:
<K: any, T: {...}>() => T[K]
type-destructor.js:167:18,167:28

type-destructor.js:171:6
Flags:
type RecursiveTypeDestructor = {|f: {|g: RecursiveTypeDestructor["f"]|}|}
= {|f: {|g: {|g: any|}|}|}
type-destructor.js:171:6,171:28

type-destructor.js:178:6
Flags:
type RecursiveTypeDestructorPoly<X> = {|
  f: ({|h: RecursiveTypeDestructorPoly<X>["f"]|} | X)
|}
= {|f: ({|h: ({|h: ({|h: any|} | X)|} | X)|} | X)|}
type-destructor.js:178:6,178:32

type-destructor.js:184:6
Flags:
type $Pick<O: {...}, K: $Keys<O>> = $NonMaybeType<O>[K]
= empty
type-destructor.js:184:6,184:10

type-destructor.js:189:14
Flags:
ReadOnlyObj
type-destructor.js:189:14,189:14

type-destructor.js:207:9
Flags:
{prop: R, type: "blah", ...}
type-destructor.js:207:9,207:14

mapped-type.js:7:6
Flags:
type MappedObj1 = {[key in keyof O]: number}
= {|bar: number, foo: number|}
mapped-type.js:7:6,7:15

mapped-type.js:9:6
Flags:
type MappedObj2 = {[key in keyof O]: O[key]}
= {|bar: string, foo: number|}
mapped-type.js:9:6,9:15

mapped-type.js:11:6
Flags:
type MappedObj3 = {-[key in keyof O]: O[key]}
= {|-bar: string, -foo: number|}
mapped-type.js:11:6,11:15

mapped-type.js:13:6
Flags:
type MappedObj4 = {+[key in keyof O]: O[key]}
= {|+bar: string, +foo: number|}
mapped-type.js:13:6,13:15

mapped-type.js:15:6
Flags:
type MappedObj5 = {[key in keyof O]?: O[key]}
= {|bar?: string, foo?: number|}
mapped-type.js:15:6,15:15

mapped-type.js:17:6
Flags:
type MappedObj6 = {+[key in keyof O]?: O[key]}
= {|+bar?: string, +foo?: number|}
mapped-type.js:17:6,17:15

mapped-type.js:19:6
Flags:
type MappedObj7 = {-[key in keyof O]?: O[key]}
= {|-bar?: string, -foo?: number|}
mapped-type.js:19:6,19:15

mapped-type.js:23:6
Flags:
type MappedObj8 = {[key in keyof DifferingModifiers]: number}
= {-bar: number, +baz: number, foo?: number, ...}
mapped-type.js:23:6,23:15

mapped-type.js:26:6
Flags:
type MappedObj9 = any (implicit)
mapped-type.js:26:6,26:15

mapped-type.js:30:6
Flags:
type Unevaluated1<T: {...}> = {[key in keyof T]: T[key]}
= {...}
mapped-type.js:30:6,30:17

mapped-type.js:32:6
Flags:
type Unevaluated2<T: {...}> = {+[key in keyof T]: T[key]}
= {...}
mapped-type.js:32:6,32:17

mapped-type.js:34:6
Flags:
type Unevaluated3<T: {...}> = {-[key in keyof T]: T[key]}
= {...}
mapped-type.js:34:6,34:17

mapped-type.js:36:6
Flags:
type Unevaluated4<T: {...}> = {[key in keyof T]?: T[key]}
= {...}
mapped-type.js:36:6,36:17

mapped-type.js:38:6
Flags:
type Unevaluated5<T: {...}> = {+[key in keyof T]?: T[key]}
= {...}
mapped-type.js:38:6,38:17

mapped-type.js:40:6
Flags:
type Unevaluated6<T: {...}> = {-[key in keyof T]?: T[key]}
= {...}
mapped-type.js:40:6,40:17

mapped-type.js:44:4
Flags:
{|bar: O["bar"], foo: O["foo"]|}
= {|bar: string, foo: number|}
mapped-type.js:44:4,44:4

mapped-type.js:51:6
Flags:
type MappedObjNonHomomorphic1 = {[key in Keys]: number}
= {|bar: number, foo: number|}
mapped-type.js:51:6,51:29

mapped-type.js:53:6
Flags:
type MappedObjNonHomomorphic2 = {[key in Keys]: O[key]}
= {|bar: string, foo: number|}
mapped-type.js:53:6,53:29

mapped-type.js:55:6
Flags:
type MappedObjNonHomomorphic3 = {-[key in Keys]: O[key]}
= {|-bar: string, -foo: number|}
mapped-type.js:55:6,55:29

mapped-type.js:57:6
Flags:
type MappedObjNonHomomorphic4 = {+[key in Keys]: O[key]}
= {|+bar: string, +foo: number|}
mapped-type.js:57:6,57:29

mapped-type.js:59:6
Flags:
type MappedObjNonHomomorphic5 = {[key in Keys]?: O[key]}
= {|bar?: string, foo?: number|}
mapped-type.js:59:6,59:29

mapped-type.js:61:6
Flags:
type MappedObjNonHomomorphic6 = {+[key in Keys]?: O[key]}
= {|+bar?: string, +foo?: number|}
mapped-type.js:61:6,61:29

mapped-type.js:63:6
Flags:
type MappedObjNonHomomorphic7 = {-[key in Keys]?: O[key]}
= {|-bar?: string, -foo?: number|}
mapped-type.js:63:6,63:29

mapped-type.js:67:6
Flags:
type UnevaluatedNonHomomorphic<T: {...}> = {[key in T]: T}
mapped-type.js:67:6,67:30

mapped-type.js:71:4
Flags:
{|bar: O["bar"], foo: O["foo"]|}
= {|bar: string, foo: number|}
mapped-type.js:71:4,71:4

mapped-type.js:76:6
Flags:
type SemiHomomorphic<O: {...}, Keys: $Keys<O>> = {[key in O]: O[key]}
= {||}
mapped-type.js:76:6,76:20

mapped-type.js:79:4
Flags:
SemiHomomorphic<{foo: number, ...}, "foo">
mapped-type.js:79:4,79:4

evaluated-size-limit.js:6:6
Flags:
type ObjSmall = {p1: {[key in Keys]: string}, ...}
= {
  p1: {|
    a: string,
    b: string,
    c: string,
    d: string,
    e: string,
    f: string,
    g: string,
    h: string,
    i: string,
    j: string,
    k: string,
    l: string,
    m: string,
    n: string,
    o: string,
    p: string,
    q: string,
    r: string,
    s: string,
    t: string,
    u: string,
    v: string,
    w: string,
    x: string,
    y: string,
    z: string
  |},
  ...
}
evaluated-size-limit.js:6:6,6:13

evaluated-size-limit.js:12:6
Flags:
type ObjBig = {
  p1: {[key in Keys]: string},
  p2: {[key in Keys]: string},
  p3: {[key in Keys]: string},
  p4: {[key in Keys]: string},
  ...
}
evaluated-size-limit.js:12:6,12:11

