Error ------------------------------------------------------------------------------------------- client_optional.js:3:1

Cannot call `qux` because rest array [1] has 0 elements but tuple type [2] has 2 elements. [invalid-tuple-arity]

   client_optional.js:3:1
   3| qux(0);
      ^^^

References:
   client_optional.js:3:1
   3| qux(0);
      ^^^^^^ [1]
   optional.js:7:41
   7| function qux(x: number = "hello", ...y: [string, mixed]):string { foo(x); return y[0]; } // error: string ~> number
                                              ^^^^^^^^^^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- generic.js:1:22

Cannot assign number to `x` because number [1] is incompatible with `T` [2]. [incompatible-type]

   generic.js:1:22
   1| function x<T>(x: T = 0) {}
                           ^ [1]

References:
   generic.js:1:18
   1| function x<T>(x: T = 0) {}
                       ^ [2]


Error -------------------------------------------------------------------------------------------------- generic.js:4:15

Cannot assign number to `x` because number [1] is incompatible with `T` [2]. [incompatible-type]

   generic.js:4:15
   4|   x<T>(x: T = 0) {}
                    ^ [1]

References:
   generic.js:4:11
   4|   x<T>(x: T = 0) {}
                ^ [2]


Error ----------------------------------------------------------------------------------------------------- maybe.js:6:5

Cannot get `x['bar']` because null or undefined [1] does not have properties. [incompatible-use]

   maybe.js:6:5
   6|   x['bar']; // Error
          ^^^^^

References:
   maybe.js:5:17
   5| function bar(x: ?{bar: number}) {
                      ^^^^^^^^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:17:5

Cannot perform arithmetic operation because null or undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:17:5
   17|     x.y++; // should error
           ^^^

References:
   nullable.js:15:36
   15| function optionalNullable3(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:17:5

Cannot perform arithmetic operation because undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:17:5
   17|     x.y++; // should error
           ^^^

References:
   nullable.js:15:36
   15| function optionalNullable3(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:23:5

Cannot perform arithmetic operation because null or undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:23:5
   23|     x.y++; // should error
           ^^^

References:
   nullable.js:21:36
   21| function optionalNullable4(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:23:5

Cannot perform arithmetic operation because undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:23:5
   23|     x.y++; // should error
           ^^^

References:
   nullable.js:21:36
   21| function optionalNullable4(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:29:5

Cannot perform arithmetic operation because null or undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:29:5
   29|     x.y++; // should error
           ^^^

References:
   nullable.js:27:36
   27| function optionalNullable5(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:29:5

Cannot perform arithmetic operation because undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:29:5
   29|     x.y++; // should error
           ^^^

References:
   nullable.js:27:36
   27| function optionalNullable5(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:35:5

Cannot perform arithmetic operation because null or undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:35:5
   35|     x.y++; // should error
           ^^^

References:
   nullable.js:33:36
   33| function optionalNullable6(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- nullable.js:35:5

Cannot perform arithmetic operation because undefined [1] is not a number or bigint. [unsafe-arithmetic]

   nullable.js:35:5
   35|     x.y++; // should error
           ^^^

References:
   nullable.js:33:36
   33| function optionalNullable6(x: {y?: ?number}) {
                                          ^^^^^^^ [1]


Error ------------------------------------------------------------------------------------------------- optional.js:1:39

Cannot use operator `*` with operands undefined [1] and number [2] [unsafe-arithmetic]

   optional.js:1:39
   1| function bar(x?: number, y?: mixed) { x * 0; }
                                            ^^^^^

References:
   optional.js:1:18
   1| function bar(x?: number, y?: mixed) { x * 0; }
                       ^^^^^^ [1]
   optional.js:1:43
   1| function bar(x?: number, y?: mixed) { x * 0; }
                                                ^ [2]


Error ------------------------------------------------------------------------------------------------- optional.js:7:26

Cannot assign string to `x` because string [1] is incompatible with number [2]. [incompatible-type]

   optional.js:7:26
   7| function qux(x: number = "hello", ...y: [string, mixed]):string { foo(x); return y[0]; } // error: string ~> number
                               ^^^^^^^ [1]

References:
   optional.js:7:17
   7| function qux(x: number = "hello", ...y: [string, mixed]):string { foo(x); return y[0]; } // error: string ~> number
                      ^^^^^^ [2]


Error -------------------------------------------------------------------------------------------------- optional.js:9:7

Cannot call `qux` because number [1] is incompatible with string [2] in index 0. [incompatible-call]

   optional.js:9:7
   9| qux(0,0,0); // Error, number ~> string
            ^ [1]

References:
   optional.js:7:42
   7| function qux(x: number = "hello", ...y: [string, mixed]):string { foo(x); return y[0]; } // error: string ~> number
                                               ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ optional.js:10:11

Cannot call `qux` because number [1] is incompatible with string [2] in index 0. [incompatible-call]

   optional.js:10:11
   10| qux(0,...[42, ""]); // Error, number ~> string
                 ^^ [1]

References:
   optional.js:7:42
    7| function qux(x: number = "hello", ...y: [string, mixed]):string { foo(x); return y[0]; } // error: string ~> number
                                                ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ optional_param2.js:7:31

Cannot call `i.map` with function bound to `mapper` because undefined [1] is incompatible with number [2] in the return
value. [incompatible-call]

   optional_param2.js:7:31
   7| var j:I<number> = i.map(id => id);
                                    ^^

References:
   optional_param2.js:3:26
   3|         mapper: (value?: V) => M
                               ^ [1]
   optional_param2.js:7:9
   7| var j:I<number> = i.map(id => id);
              ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------ optional_param4.js:12:5

Cannot call `foo` with `true` bound to `x` because boolean [1] is incompatible with number [2]. [incompatible-call]

   optional_param4.js:12:5
   12| foo(true); // ERROR boolean ~> number
           ^^^^ [1]

References:
   optional_param4.js:3:18
    3| function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                        ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------- optional_param4.js:13:10

Cannot call `foo` because boolean [1] is incompatible with string [2] in array element. [incompatible-call]

   optional_param4.js:13:10
   13| foo(123, true); // ERROR boolean ~> string
                ^^^^ [1]

References:
   optional_param4.js:3:38
    3| function foo(x?: number, ...y: Array<string>): [?number, Array<string>] {
                                            ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ undefined.js:3:36

Cannot assign undefined to `bar` because undefined [1] is incompatible with object type [2]. [incompatible-type]

   undefined.js:3:36
   3| function foo(bar?: {duck: mixed} = undefined) {
                                         ^^^^^^^^^ [1]

References:
   undefined.js:3:20
   3| function foo(bar?: {duck: mixed} = undefined) {
                         ^^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- undefined2.js:8:14

Cannot get `x.duck` because property `duck` is missing in undefined [1]. [incompatible-use]

   undefined2.js:8:14
   8|     return x.duck;
                   ^^^^

References:
   undefined2.js:3:20
   3| function foo(bar?: {duck: mixed}) {
                         ^^^^^^^^^^^^^ [1]



Found 21 errors
