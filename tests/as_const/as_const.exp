Error -------------------------------------------------------------------------------------------------- invalid.js:14:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   14| one as const; // error variable is not a literal
       ^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:15:2

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   15| (function f() {}) as const; // error function is not a literal
        ^^^^^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:16:2

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   16| (class C {}) as const; // error class is not a literal
        ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:17:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   17| 1 as const as const; // error as const is not a literal
       ^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:18:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   18| 1 + 1 as const; // error binary operation is not a literal
       ^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:19:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   19| 1 as number as const; // error cast expression is not a literal
       ^^^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:20:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   20| null as const; // error null is not a supported literal
       ^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:21:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   21| undefined as const; // error undefined is not a supported literal
       ^^^^^^^^^


Error -------------------------------------------------------------------------------------------------- invalid.js:22:1

The `as const` assertion can only be used on string, numeric, boolean, object, or array literals. [unsupported-syntax]

   22| foo() as const; // error function call is not a literal
       ^^^^^


Error ------------------------------------------------------------------------------------------------ primitive.js:12:3

Cannot cast `1` to number literal `2` because number literal `1` [1] is incompatible with number literal `2` [2].
[incompatible-cast]

   primitive.js:12:3
   12|   1 as const as 2; // error 1 ~> 2
         ^ [1]

References:
   primitive.js:12:17
   12|   1 as const as 2; // error 1 ~> 2
                       ^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:17:3

Cannot cast `2` to `LocalOne` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:17:3
   17|   2 as LocalOne; // error 2 ~> 1
         ^ [1]

References:
   primitive.js:17:8
   17|   2 as LocalOne; // error 2 ~> 1
              ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:18:8

Cannot cast `2` to `LocalOne` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:18:8
   18|   2 as number as LocalOne; // error number ~> 1
              ^^^^^^ [1]

References:
   primitive.js:18:18
   18|   2 as number as LocalOne; // error number ~> 1
                        ^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:27:3

Cannot cast `2` to `ImportedOne` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:27:3
   27|   2 as ImportedOne; // error 2 ~> 1
         ^ [1]

References:
   primitive.js:27:8
   27|   2 as ImportedOne; // error 2 ~> 1
              ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:28:8

Cannot cast `2` to `ImportedOne` because number [1] is incompatible with number literal `1` [2]. [incompatible-cast]

   primitive.js:28:8
   28|   2 as number as ImportedOne; // error number ~> 1
              ^^^^^^ [1]

References:
   primitive.js:28:18
   28|   2 as number as ImportedOne; // error number ~> 1
                        ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:35:3

Cannot cast `"a"` to string literal `b` because string literal `a` [1] is incompatible with string literal `b` [2].
[incompatible-cast]

   primitive.js:35:3
   35|   "a" as const as "b"; // error a ~> b
         ^^^ [1]

References:
   primitive.js:35:19
   35|   "a" as const as "b"; // error a ~> b
                         ^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:40:3

Cannot cast `"b"` to `LocalA` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:40:3
   40|   "b" as LocalA; // error b ~> a
         ^^^ [1]

References:
   primitive.js:40:10
   40|   "b" as LocalA; // error b ~> a
                ^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:41:10

Cannot cast `"b"` to `LocalA` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:41:10
   41|   "b" as string as LocalA; // error string ~> a
                ^^^^^^ [1]

References:
   primitive.js:41:20
   41|   "b" as string as LocalA; // error string ~> a
                          ^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:50:3

Cannot cast `"b"` to `ImportedA` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:50:3
   50|   "b" as ImportedA; // error b ~> a
         ^^^ [1]

References:
   primitive.js:50:10
   50|   "b" as ImportedA; // error b ~> a
                ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:51:10

Cannot cast `"b"` to `ImportedA` because string [1] is incompatible with string literal `a` [2]. [incompatible-cast]

   primitive.js:51:10
   51|   "b" as string as ImportedA; // error string ~> a
                ^^^^^^ [1]

References:
   primitive.js:51:20
   51|   "b" as string as ImportedA; // error string ~> a
                          ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:58:3

Cannot cast `true` to boolean literal `false` because boolean literal `true` [1] is incompatible with boolean literal
`false` [2]. [incompatible-cast]

   primitive.js:58:3
   58|   true as const as false; // error true ~> false
         ^^^^ [1]

References:
   primitive.js:58:20
   58|   true as const as false; // error true ~> false
                          ^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:63:3

Cannot cast `false` to `LocalTrue` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:63:3
   63|   false as LocalTrue; // error false ~> true
         ^^^^^ [1]

References:
   primitive.js:63:12
   63|   false as LocalTrue; // error false ~> true
                  ^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:64:12

Cannot cast `false` to `LocalTrue` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:64:12
   64|   false as boolean as LocalTrue; // error bool ~> true
                  ^^^^^^^ [1]

References:
   primitive.js:64:23
   64|   false as boolean as LocalTrue; // error bool ~> true
                             ^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:73:3

Cannot cast `false` to `ImportedTrue` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:73:3
   73|   false as ImportedTrue; // error false ~> true
         ^^^^^ [1]

References:
   primitive.js:73:12
   73|   false as ImportedTrue; // error false ~> true
                  ^^^^^^^^^^^^ [2]


Error ----------------------------------------------------------------------------------------------- primitive.js:74:12

Cannot cast `false` to `ImportedTrue` because boolean [1] is incompatible with boolean literal `true` [2].
[incompatible-cast]

   primitive.js:74:12
   74|   false as boolean as ImportedTrue; // error bool ~> true
                  ^^^^^^^ [1]

References:
   primitive.js:74:23
   74|   false as boolean as ImportedTrue; // error bool ~> true
                             ^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:79:3

Cannot cast `1n` to number literal `1` because bigint literal `1n` [1] is incompatible with number literal `1` [2].
[incompatible-cast]

   primitive.js:79:3
   79|   1n as const as 1;
         ^^ [1]

References:
   primitive.js:79:18
   79|   1n as const as 1;
                        ^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:81:3

Cannot cast `1n` to bigint literal `2n` because bigint literal `1n` [1] is incompatible with bigint literal `2n` [2].
[incompatible-cast]

   primitive.js:81:3
   81|   1n as const as 2n; // error 1n ~> 2n
         ^^ [1]

References:
   primitive.js:81:18
   81|   1n as const as 2n; // error 1n ~> 2n
                        ^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:86:3

Cannot cast `2n` to `LocalBigInt` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   primitive.js:86:3
   86|   2n as LocalBigInt; // error 2n ~> 1n
         ^^ [1]

References:
   primitive.js:86:9
   86|   2n as LocalBigInt; // error 2n ~> 1n
               ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:87:9

Cannot cast `2n` to `LocalBigInt` because bigint [1] is incompatible with bigint literal `1n` [2]. [incompatible-cast]

   primitive.js:87:9
   87|   2n as bigint as LocalBigInt; // error bigint ~> 1n
               ^^^^^^ [1]

References:
   primitive.js:87:19
   87|   2n as bigint as LocalBigInt; // error bigint ~> 1n
                         ^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:96:3

Cannot cast `2n` to `ImportedBigInt` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   primitive.js:96:3
   96|   2n as ImportedBigInt; // error 2n ~> 1n
         ^^ [1]

References:
   primitive.js:96:9
   96|   2n as ImportedBigInt; // error 2n ~> 1n
               ^^^^^^^^^^^^^^ [2]


Error ------------------------------------------------------------------------------------------------ primitive.js:97:9

Cannot cast `2n` to `ImportedBigInt` because bigint [1] is incompatible with bigint literal `1n` [2].
[incompatible-cast]

   primitive.js:97:9
   97|   2n as bigint as ImportedBigInt; // error bigint ~> 1n
               ^^^^^^ [1]

References:
   primitive.js:97:19
   97|   2n as bigint as ImportedBigInt; // error bigint ~> 1n
                         ^^^^^^^^^^^^^^ [2]



Found 30 errors
